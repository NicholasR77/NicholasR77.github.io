---
layout: post
title:      " My CLI Data Gem Project - D&D 5e SpellBook"
date:       2020-06-15 23:11:39 +0000
permalink:  my_cli_data_gem_project_-_d_and_d_5e_spellbook
---


This last week has been one of the most challenging, yet extremely rewarding and exciting times in my life. I'm sure many of you believe that is a strange thing to say, especially when it feels like your brain is partially melted from focus and programming. The answer? I've finally found a creative space I love and where I don't totally suck. I could never draw or paint and, although I played music, couldn't find a spark for continued success. As I worked on my CLI Data Gem, I found myself enthralled with the process and project and am convinced that this creative outlet is my career and personal calling. As I sit here with my completed project, I realize the mistakes I made and things I should improve upon. What's funny though, is that doesn't worry me or upset me like it might with other things; I simply had a blast with this project and just want to keep learning. With that insight, let's talk about my SpellBook project; what it was, what went right, what went wrong, and everything in between.

To get started, I'm going to briefly describe the project and how I kind-of got the idea. When I was brainstorming, I instantly thought; what would be something that could translate into my current job? Currenty, I'm employed for a company that works with many different Tabletop games, including Dungeons and Dragons (D&D). Personally, I've played D&D for many years and absolutely love it. As I brainstormed, it clicked quickly that I wanted to do something with D&D. There are many different editions of D&D, but the latest version is D&D 5E, so that's what I decided to go with. From there, I had to decide how I was going to pull data for my project. I knew there were some public API's out there and found two good candidates; https://www.dnd5eapi.co/ and https://open5e.com/. Originally, I went with, https://www.dnd5eapi.co/, but switched whern I started programming. After picking my API's, I reviewed them to get an idea of what my app would do with the data; i.e. what was the main focus of the app. Using the guidelines, I thought about some problems people have when playing D&D. One of those problems is that new players have a hard time knowing what spells are available for their chosen class. That formed the focus of my app; you pick a D&D 5e class and you can select an option for finding spells for that class.

Let's talk about my app works from a general overview. First, when the program starts, it pulls the API data for all classes and spells and stores each individual entry as an applicable object instance. Once this is complete (it's a very quick process), the program welcomes the user, displays the class names available for selection, and asks the user to enter a class name. If the class entered doesn't have spells, it let's the user know they need to choose a new class. Otherwise, if the class does have spells, the program asks the user to enter a search option, of which there are a few to choose from. They are: search by name, search by level, and search by school of magic. There are also options for selecting a new class and general exiting the program. Once the user selects a search option, they will be prompted for further information related to the search. For example, if they select search by level, they will be asked to enter a desired spell level to search from. Once entered, a list of applicable spells are displayed in which each spell entry displays information about the spell. This information includes such things like: description, components, concentration requirements, and more. After displays the spell list, the program redirects the user to the search menu options again and the cycle continues.

Overall, I think there are some really cool and great things about my program, so let's talk about them. First, I think I did a good job of creating proper object instances for each entry. Each object instance properly stores the information provided from the API data as object attributes and the class markup for those objects is pretty clean and well written, in my opinion. Second, I believe I did a pretty good job with instance of meta-programming. There are several points in my code where I keep things DRY by utilizing meta-programming in an interesting way. Last, I think I did a nice job in writing descriptive methods and classes. I think they pretty well inform any readers or other programmers what that method or class is supposed to do just by the name, which in my opinion, is pretty important.

One thing I set out to do in this project **was not go down a rabbit hole**. I knew I could have spent hours and hours and hours going through trying to make the best iteration of my app. I'm not saying I didn't try my best, because I absolutely did. I simply wanted to complete the project as my "initial" idea, so I could discuss my mistakes and improvements here. So let's talk about some of them! First, there are several spots in my code, that, due to my approach to method design, the code isn't as DRY as it could be. Specifically, the methods I drafted up regarding search options. Second, the way I fetch the API data, by pulling all the data at the beginning of the program, was not ideal at all in retrospect. The time it takes it takes to fetch that data is pretty quick right now due to the minimal number of records needing to be fetched. However, what happens if there are 10x or 100x the numbers of records? My users would have to wait for a long time for that data to be fetched. Additionally, my users aren't really receiving fresh data that often. I think it would have been much better to fetch fresh data each time a search option was entered, instead of just at the beginning of program start. Third, I think there was a real flaw with how I structured data storage. Most of programs search for associated data via "All" arrays built into the entry's parent class. However, in hind-sight, it's not a good way of storing such data and I think other programmers might get a bit confused when trying to utilize. How I store my data should better inform the next programmer who writes to my program. Last, I don't think I did a good enough job of building my class relationships. I found it difficult to cohesively connect my classes in a way that made sense to me and made sense in my program. 

Again, I had an absolute blast working through this project. I'm really happy with the end results; I have a working program that utilizes the concepts we were taught and have a really strong idea of how to improve that program as well as my general skills in the field because of this project. Thanks to everyone who reads through this. Best of luck in all of your programming!
